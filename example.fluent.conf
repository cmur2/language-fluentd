
# Receive events from 24224/tcp
# This is used by log forwarding and the fluent-cat command
<source>
  @type forward
  port 24224
  str1a_param "foo"
  str1b_param "foo
  bar"
  str2a_param 'foo'
  str2b_param 'foo
  bar'
  str2c_param "foo\nbar" # \n is interpreted as actual LF character
  array_param [
    "a", "b"
  ]
  hash_param {
    "k": "v",
    "k1": 10
  }
  host_param "#{Socket.gethostname}" # host_param is actual hostname like `webserver1`.
  env_param "foo-#{ENV["FOO_BAR"]}" # NOTE that foo-"#{ENV["FOO_BAR"]}" doesn't work.
  tag "test.#{ENV['PROJECT_NAME']}"
</source>

<source>
  @type tail
  @label @SYSTEM
</source>

# http://this.host:9880/myapp.access?json={"event":"data"}
<source>
  @type http
  port 9880
</source>

<filter foo.bar>
  @type record_transformer
  <record>
    hostname "#{Socket.gethostname}"
    tag ${record["project_name"]}.scope.${tag}_old
    key.flatten x
  </record>
</filter>

<match myapp.access yourapp.access>
  @type file
  path /var/log/fluent/access
</match>

<label @SYSTEM>
  <filter var.log.middleware.**>
    @type grep
    # ...
  </filter>
  <match **>
    @type s3
    include_tag_key true
    buffer_chunk_limit 2M
    buffer_queue_limit 32
    flush_interval 5s
    # ...
  </match>
</label>

<system>
  # equal to -qq option
  log_level error
  # equal to --without-source option
  without_source
  # ...
</system>

# Include config files in the ./config.d directory
@include config.d/*.conf

# =======================
# v1_literal_example.conf
# =======================
<section1>
  key1  'text'     # text
  key2  '\''       # ' (1 char)
  key3  '\\'       # \ (1 char)
  key4  '\t'       # \t (2 char)
  key5  '\['       # \[ (2 char)
  key6  '\\['      # \[ (2 char)
  key7  '#t'       # #t (2 char)
  key8  '\#{test}' # \#{test} (8 char)
  key9  '#{test}'  # #{test} (7 char)
  key10 '\[(?<time>[^\]]*)\] (?<message>.*)'    # \[(?<time>[^\]]*\] (?<message>.*)
</section1>
<section2>
  key1  "text"     # text
  key2  "\""       # " (1 char)
  key3  "\\"       # \ (1 char)
  key4  "\t"       # TAB (1 char)
  key5  "\["       # [ (1 char)
  key6  "\\["      # \[ (2 char)
  key7  "#t"       # #t (2 char)
  key8  "\#{test}" # #{test} (7 char)
  key9  "#{test}"  # replaced by eval('test')
  key10 "\\[(?<time>[^\\]]*)\\] (?<message>.*)" # \[(?<time>[^\]]*\] (?<message>.*)
</section2>
<section3>
  key1  text     # text
  key2  \        # \ (1 char)
  key3  \\       # \\ (2 char)
  key4  \t       # \t (2 char)
  key5  \[       # \[ (2 char)
  key6  \\[      # \\[ (3 char)
  key7  #t       # #t (2 char)
  key8  \#{test} # \#{test} (8 char)
  key9  #{test}  # #{test} (7 char)
  key10 \[(?<time>[^\]]*)\] (?<message>.*)    # \[(?<time>[^\]]*\] (?<message>.*)
</section3>
